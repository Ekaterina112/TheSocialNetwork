{"version":3,"sources":["components/common/formController/FormController.jsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/PostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["Textarea","input","meta","touched","error","props","hasError","className","s","formControl","module","exports","Post","message","count","maxLength","maxLengthCreator","minLength","minLengthCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","validate","required","MyPosts","React","memo","posts","postData","map","p","id","value","addPost","newPostBody","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostCreator","ProfileStatusWithHooks","status","updateStatus","useState","stat","setStat","editMode","setEditMode","useEffect","onDoubleClick","onBlur","onChange","e","currentTarget","Contact","contactTitle","contactValue","ProfileData","profile","isOwner","openEditMode","c","avatar","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","key","ProfileDataReduxForm","formControlSummaryError","Input","type","ProfileInfo","savePhoto","saveNewProfileData","src","photos","large","userPhoto","alt","target","files","length","initialValues","formData","then","Preloader","Profile","ProfileContainer","userId","Number","this","match","params","currentUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","WithAuthRedirectComponent"],"mappings":"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","file":"static/js/4.4e05fec5.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormController.module.css'\r\n\r\n//not understand!\r\nexport const Textarea = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (<div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n        <div>\r\n            <textarea {...input}{...props}/>\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>)\r\n}\r\nexport const Input = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (<div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n        <div>\r\n            <input {...input}{...props}/>\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>)\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__37IVM\",\"avatar\":\"ProfileInfo_avatar__1VI09\"};","import React from 'react';\r\nimport '../../../../App.css';\r\n\r\n\r\ntype PostType = {\r\n    message: string\r\n    count: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return <div>\r\n        {props.message}\r\n        <div>{props.count} </div>\r\n    </div>\r\n\r\n}\r\nexport default Post","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {maxLengthCreator, minLengthCreator, required} from '../../../utilits/validators/postFormValidators';\r\nimport {Textarea} from '../../common/formController/FormController';\r\n\r\nexport  type PostDataType = {}\r\n//& IProps add if want to give some other props\r\n\r\nconst maxLength = maxLengthCreator(10)\r\nconst minLength = minLengthCreator(3)\r\nconst PostForm: React.FC<InjectedFormProps<PostDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder={'new post...'} name={'newPostBody'} component={Textarea}\r\n                   validate={[required, maxLength, minLength]}/>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n//обертка\r\nconst PostReduxForm = reduxForm<PostDataType>(\r\n    //уникальное имя\r\n    {form: 'dialog'})(PostForm)\r\nexport default PostReduxForm","import React from 'react';\r\nimport '../../../App.css';\r\nimport Post from './Post/Post';\r\nimport {PostDataType} from '../../../redux/types';\r\nimport PostReduxForm from './PostForm';\r\n\r\ntype PropsType = {\r\n    postData: Array<PostDataType>\r\n    newPostText?: string\r\n    addPost: (newPostBody:string) => void\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n    let posts = props.postData.map((p) => <Post key={p.id} message={p.message} count={p.count}/>)\r\n\r\n    let addPost = (value:any) => {props.addPost(value.newPostBody)}\r\n\r\n    return <div>\r\n        <h3> my posts</h3>\r\n        <PostReduxForm onSubmit={addPost}/>\r\n        <div>\r\n            {posts}\r\n        </div>\r\n    </div>\r\n});\r\n\r\nexport default MyPosts","import {addPostCreator} from '../../../../redux/profilePageReducer';\r\nimport MyPosts from '../MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {AppStateType} from '../../../../redux/redux-store';\r\n\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType) =>{\r\n    return {\r\n        postData: state.profilePage.postData,\r\n        newPostText:state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch) => {\r\n    return {addPost: (newPostBody:string) => {\r\n            dispatch(addPostCreator(newPostBody))},\r\n    }\r\n}\r\nconst MyPostsContainer= connect (mapStateToProps,mapDispatchToProps ) (MyPosts) //create container components\r\n\r\nexport default MyPostsContainer","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = ({status, updateStatus,}) => {\r\n    let [stat, setStat] = useState<string>(status)\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        setStat(status)\r\n    }, [status])\r\n\r\n    const activatedMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivatedMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(stat)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStat(e.currentTarget.value)\r\n    }\r\n    return <div>\r\n        <div>\r\n            <b>Status:</b>\r\n            {!editMode && <span\r\n                onDoubleClick={activatedMode}>{stat}</span>}\r\n        </div>\r\n        <div>\r\n            {editMode && <input\r\n                onBlur={deactivatedMode}\r\n                onChange={onStatusChange}\r\n                value={stat}/>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    contactTitle: string,\r\n    contactValue: string | null\r\n}\r\nconst Contact: React.FC<PropsType> = ({contactTitle, contactValue}) => {\r\n    return <div>\r\n        <b>{contactTitle}</b>:{contactValue}\r\n    </div>\r\n}\r\nexport default Contact","import React from 'react';\r\nimport {UserProfileType} from '../../../../redux/types';\r\nimport c from '../ProfileInfo.module.css';\r\nimport Contact from './Contact/Contact';\r\n\r\n\r\ntype PropsType = {\r\n    profile: UserProfileType,\r\n    isOwner:boolean,\r\n    openEditMode:()=>void\r\n}\r\nconst ProfileData: React.FC<PropsType> = ({profile,isOwner,openEditMode}) => {\r\n    return <div className={c.avatar}>\r\n        {isOwner && <div><button onClick={openEditMode}>EDIT</button></div>}\r\n        <div><b>Full Name</b>: {profile.fullName}</div>\r\n        <div><b>About Me</b>: {profile.aboutMe}</div>\r\n        <div><b>Looking For A Job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n        {profile.lookingForAJob ?\r\n            <div><b>Looking For A Job Description</b>: {profile.lookingForAJobDescription}</div> : ''}\r\n        <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            // @ts-ignore\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}</div>\r\n\r\n    </div>\r\n}\r\nexport default ProfileData","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../../../common/formController/AlternativeFormController';\r\nimport {required} from '../../../../utilits/validators/postFormValidators';\r\nimport {Textarea} from '../../../common/formController/FormController';\r\nimport {UserProfileType} from '../../../../redux/types';\r\nimport s from '../../../LoginPage/LoginPage.module.css';\r\n\r\n\r\nexport  type FormDataType = {\r\n    profile: UserProfileType,\r\n    initialValues: UserProfileType\r\n}\r\n\r\n//@ts-ignore\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType, any>> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <button>SAVE</button>\r\n        {error && <div className={s.formControlSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div><b>Full Name</b>: {<Field placeholder={'Full Name'} name={'fullName'} component={Input} validate={[required]}/>}</div>\r\n        <div><b>About Me</b>: {<Field placeholder={'About Me'} name={'aboutMe'} component={Textarea} validate={[required]}/>}</div>\r\n        <div><b>Looking For A Job</b>: {<Field type={'checkbox'} value={'LookingForAJob'} name={'LookingForAJob'} component={Input}/>}</div>\r\n        <div><b>Looking For A Job Description</b>: {<Field placeholder={'Looking For A Job Description'}\r\n                                                           name={'lookingForAJobDescription'} component={Textarea}\r\n                                                           validate={[required]}/>}</div>\r\n\r\n        <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key}><b>{key}:</b><Field placeholder={key} name={`contacts.${key}`} component={Input}/></div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n//name={`contacts.${key}`} remember!!!! for right Object for redux!!!\r\n\r\n// @ts-ignore\r\nconst ProfileDataReduxForm = reduxForm<FormDataType>({form: 'edit-mode-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm","import React, {ChangeEvent, useState} from 'react';\r\nimport c from './ProfileInfo.module.css'\r\nimport {UserProfileType} from '../../../redux/types';\r\nimport Preloader from '../../common/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks';\r\nimport ProfileData from './ProfileData/ProfileData';\r\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\r\nimport userPhoto from '../../../avatar.jpg';\r\n\r\n\r\ntype PropsType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: any) => void,\r\n    saveNewProfileData: (formData: any) => void\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveNewProfileData}) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    const openEditMode = () => setEditMode(true)\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // @ts-ignore\r\n        if (e.target.files.length) {\r\n            // @ts-ignore\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmitEdit = (formData: any) => {\r\n        // @ts-ignore\r\n        saveNewProfileData(formData).then(()=>{\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return <div className={c.profile}>\r\n        <img src={profile.photos.large != null ? profile.photos.large : userPhoto} alt={'here avatar'}/>\r\n        {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n        {editMode\r\n            ? <ProfileDataForm profile={profile}\r\n                // @ts-ignore\r\n                               initialValues={profile}\r\n                               onSubmit={onSubmitEdit}/>\r\n            : <ProfileData profile={profile} isOwner={isOwner} openEditMode={openEditMode}/>}\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n    </div>\r\n}\r\n\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport '../../App.css';\r\nimport MyPostsContainer from './MyPosts/Post/MyPostsContainer';\r\nimport {UserProfileType} from '../../redux/types';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\ntype PropsType = {\r\n    profile: UserProfileType\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner:boolean,\r\n    savePhoto:(file:any)=>void,\r\n    saveNewProfileData:(formData:any)=>void,\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = ({profile, status, updateStatus, isOwner,savePhoto,saveNewProfileData}) => {\r\n    return <div>\r\n        <ProfileInfo savePhoto={savePhoto} isOwner={isOwner}  profile={profile} status={status} updateStatus={updateStatus} saveNewProfileData={saveNewProfileData}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\nexport default Profile","import React, {ChangeEvent, ComponentType} from 'react';\r\nimport '../../App.css';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {getStatus, getUserProfile, saveNewProfileData, savePhoto, updateStatus} from '../../redux/profilePageReducer';\r\nimport {UserProfileType} from '../../redux/types';\r\nimport Preloader from '../common/Preloader';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {WithAuthRedirectComponent} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\n//типы входных данных описать\r\ntype UsersProfilePropsType = MapDispatchPropsType & MapStatePropsType\r\ntype PathParamType = {\r\n    userId: string,\r\n}\r\n\r\ntype CommonUsersProfilePropsType = RouteComponentProps<PathParamType> & UsersProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonUsersProfilePropsType> {\r\n    refreshProfile() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            //userId = 12000\r\n            userId = this.props.currentUserId!\r\n            //*\r\n            //system redirect\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonUsersProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return this.props.profile\r\n            ?\r\n            <Profile isOwner={!this.props.match.params.userId} {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus} savePhoto={this.props.savePhoto}/>\r\n            : <Preloader/>\r\n    }\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: null | UserProfileType\r\n    status: string\r\n    currentUserId: number | null,\r\n    isAuth: boolean\r\n}\r\n\r\nexport  type MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto:(p:any)=>void\r\n    saveNewProfileData:(formData:any)=>void\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        currentUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n/*//.........3.........................2.......................1\r\nlet AuthRedirectComponent = WithAuthRedirectComponent(ProfileContainer)\r\n//ОБЕРТКА, ЗАКИДЫВАЕТ ДАННЫЕ ИЗ УРЛА\r\n//................5.....................4...............3\r\nlet WithURLDataContainerComponent = withRouter(AuthRedirectComponent)\r\n//.....................................6.......................................................................................................5\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {getUserProfile})(WithURLDataContainerComponent)*/\r\n\r\n\r\nexport default compose<ComponentType>(connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus,\r\n        updateStatus,\r\n        savePhoto, saveNewProfileData\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirectComponent)\r\n(ProfileContainer)\r\n//*В TypeScript постфикс ! удаляет null и undefined из типа выражения.\r\n//\r\n// Это полезно, когда вы знаете, по причинам, выходящим за пределы способности вывода TypeScript, что переменная, которая \"could\" будет null или undefined , на самом деле не является таковой."],"sourceRoot":""}