{"version":3,"sources":["components/common/formController/FormController.jsx","components/Dialogs/Dialogs.module.css","components/Dialogs/MessagesItems/MessagesItems.tsx","components/Dialogs/DialogsItems/DialogsItems.tsx","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["Textarea","input","meta","touched","error","props","hasError","className","s","formControl","module","exports","MessagesItems","dialog","message","DialogsItems","path","id","to","name","maxLength","maxLengthCreator","minLength","minLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","validate","required","Dialogs","state","messagePage","dialogArr","dialogItemsData","map","d","messageArr","messageData","m","allDialogs","dialogs","messages","value","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","WithAuthRedirectComponent"],"mappings":"4LAIaA,EAAW,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWC,EAAW,gCAC7DC,EAAWH,GAAWC,EAE5B,OAAQ,sBAAKG,UAAWC,IAAEC,YAAc,KAAOH,EAAWE,IAAEJ,MAAQ,IAA5D,UACJ,8BACI,oDAAcH,GAAUI,MAE3BC,GAAY,+BAAOF,S,oBCV5BM,EAAOC,QAAU,CAAC,WAAa,8B,4ECkBhBC,EAToC,SAACP,GAGhD,OAAO,8BACP,qBAAKE,UAAWC,IAAEK,OAAlB,SAA2BR,EAAMS,a,QCKtBC,EAVkC,SAACV,GAC9C,IAAIW,EAAO,YAAcX,EAAMY,GAC/B,OAAO,qBAAKV,UAAWC,IAAEK,OAAlB,SACH,eAAC,IAAD,CAASK,GAAIF,EAAb,UAAoBX,EAAMc,KAA1B,U,mCCJFC,EAAYC,YAAiB,IAC7BC,EAAYC,YAAiB,GAkBpBC,EAHUC,YAErB,CAACC,KAAM,UAFcD,EAZuC,SAACpB,GAE7D,OACQ,uBAAMsB,SAAUtB,EAAMuB,aAAtB,UAEI,cAACC,EAAA,EAAD,CAAOC,YAAa,iBAAkBX,KAAM,iBAAkBY,UAAW/B,IAClEgC,SAAU,CAACC,IAAUb,EAAWE,KACvC,gDCoBDY,EAzBC,SAAC7B,GACb,IAAI8B,EAAM9B,EAAM+B,YAEZC,EAAYF,EAAMG,gBAAgBC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAcrB,KAAMqB,EAAErB,KAAiBF,GAAIuB,EAAEvB,IAAZuB,EAAEvB,OAChFwB,EAAaN,EAAMO,YAAYH,KAAI,SAACI,GAAD,OAAO,cAAC,EAAD,CAAe7B,QAAS6B,EAAE7B,SAAc6B,EAAE1B,OASxF,OACI,sBAAKV,UAAWC,IAAEoC,WAAlB,UACI,qBAAKrC,UAAWC,IAAEqC,QAAlB,SACKR,IAEL,qBAAK9B,UAAWC,IAAEsC,SAAlB,SACKL,IAEP,cAAC,EAAD,CAAkBd,SAdG,SAACoB,GAExB1C,EAAM2C,YAAYD,EAAME,uB,iCCQjBC,sBAAuBC,aAXhB,SAAChB,GACnB,MAAO,CAACC,YAAaD,EAAMC,gBAEN,SAACgB,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAmBJ,SAMpCK,IADWJ,CAEdhB","file":"static/js/3.5f7e920b.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormController.module.css'\r\n\r\n//not understand!\r\nexport const Textarea = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (<div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n        <div>\r\n            <textarea {...input}{...props}/>\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>)\r\n}\r\nexport const Input = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error\r\n\r\n    return (<div className={s.formControl + \" \" + (hasError ? s.error : '')}>\r\n        <div>\r\n            <input {...input}{...props}/>\r\n        </div>\r\n        {hasError && <span>{error}</span>}\r\n    </div>)\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"allDialogs\":\"Dialogs_allDialogs__2RmvI\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\ntype MessagesItemsType = {\r\n    message: string\r\n}\r\n\r\n\r\nconst MessagesItems: React.FC<MessagesItemsType> = (props) => {\r\n\r\n\r\n    return <div>\r\n    <div className={s.dialog}>{props.message}\r\n    </div>\r\n    </div>\r\n}\r\n\r\nexport default MessagesItems","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogsItemsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogsItems: React.FC<DialogsItemsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{props.name} </NavLink>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default DialogsItems","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {Textarea} from '../common/formController/FormController';\r\nimport {maxLengthCreator, minLengthCreator, required} from '../../utilits/validators/postFormValidators';\r\n\r\n export  type DialogsDataType= {\r\n\r\n}\r\nconst maxLength = maxLengthCreator(20)\r\nconst minLength = minLengthCreator(5)\r\n\r\n//& IProps add if want to give some other props\r\nconst DialogsForm:React.FC<InjectedFormProps<DialogsDataType>> =(props) => {\r\n\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n\r\n                <Field placeholder={\"new message...\"} name={'newMessageBody'} component={Textarea}\r\n                       validate={[required, maxLength, minLength]} />\r\n                <button>send</button>\r\n            </form>\r\n    )\r\n}\r\n//обертка\r\nconst  DialogsReduxForm= reduxForm<DialogsDataType>(\r\n    //уникальное имя\r\n    {form: 'dialog'})(DialogsForm)\r\nexport default DialogsReduxForm","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport MessagesItems from './MessagesItems/MessagesItems';\r\nimport DialogsItems from './DialogsItems/DialogsItems';\r\nimport {MessagePageType} from '../../redux/types';\r\nimport DialogsReduxForm from './DialogsForm';\r\n\r\n\r\ntype DialogsPropsType = {\r\n    messagePage: MessagePageType\r\n    sendMessage:(newMessageBody:string) =>void\r\n}\r\n\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n    let state=props.messagePage\r\n\r\n    let dialogArr = state.dialogItemsData.map((d) => <DialogsItems name={d.name} key={d.id} id={d.id}/>)\r\n    let messageArr = state.messageData.map((m) => <MessagesItems message={m.message} key={m.id}/>)\r\n\r\n\r\n    const onSendMessageClick = (value:any) => {\r\n        // field name\r\n        props.sendMessage(value.newMessageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.allDialogs}>\r\n            <div className={s.dialogs}>\r\n                {dialogArr}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messageArr}\r\n            </div>\r\n          <DialogsReduxForm onSubmit={onSendMessageClick}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs","import {ComponentType} from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {MessagePageType} from '../../redux/types';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {WithAuthRedirectComponent} from '../../hoc/withAuthRedirect';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {sendMessageCreator} from '../../redux/messagePageReducer';\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    // описываем, что возвращает MapStateToProps\r\n    messagePage: MessagePageType\r\n}\r\n\r\nexport  type MapDispatchPropsType = {\r\n    // описываем, что возвращает MapDispatchToProps\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {messagePage: state.messagePage}\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirectComponent)\r\n(Dialogs)\r\n/*//............3...........................2..............1\r\nlet AuthRedirectComponent =WithAuthRedirectComponent(Dialogs)\r\n//.......................................4.....................................3\r\nconst DialogsContainer = connect (mapStateToProps, mapDispatchToProps) (AuthRedirectComponent)*/\r\n//почему в одних скобках?????\r\n//2 параметром целевая\r\n\r\n\r\n"],"sourceRoot":""}